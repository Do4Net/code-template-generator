using HY.FinancialCooperation.Common.FinancialCooperation;
using HY.FinancialCooperation.Common.FinancialCooperation.InputOutput;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HY.FinancialCooperation.Core.FinancialCooperation
{
    class AddOrUpdate<%=model.TableName %> : FinancialCooperationServiceHandlerBase<AddOrUpdate<%=model.TableName %>Request, AddOrUpdate<%=model.TableName %>Reply>
    {
        HY.FinancialCooperation.Data.Entities.<%=model.TableName %> data = null;
        IQueryable<HY.FinancialCooperation.Data.Entities.<%=model.TableName %>> query = null;
        HY.Common.Seedwork.IRepository<HY.FinancialCooperation.Data.Entities.<%=model.TableName %>> repository = null;
        public AddOrUpdate<%=model.TableName %>()
        {
            repository = base.FinancialCooperationRepositoryContext.GetRepository<HY.FinancialCooperation.Data.Entities.<%=model.TableName %>>();
            query = repository.GetQuery();
        }
        protected override int ModelId
        {
            get
            {
                return base.ModelId;
            }
        }
        protected override void BeforeHandle()
        {
            base.BeforeHandle();
        }
        protected override void RealRequestInvoke()
        {
            switch (request.ReSetIsvalid)
            {
                case true:
                    ReSetIsvalid();
                    break;
                default:
                    AddOrUpdateEntity();
                    break;
            }
            repository.UnitOfWork.Commit();
        }

        private void AddOrUpdateEntity()
        {
            if (data == null)
            {
                data = EntityMappers.EntityMapper.Map<<%=model.TableName %>, HY.FinancialCooperation.Data.Entities.<%=model.TableName %>>(request.<%=model.TableName %>);
            <% model.Clumns&&model.Clumns.forEach(function(clumn){ %> <% if(["CreateTime","CreateTime","IsValid","ModifyTime","ModifyUser"].indexOf(clumn.AttributeName)==-1) {%>
                data.<%= clumn.AttributeName %> = request.<%=model.TableName %>.<%= clumn.AttributeName %>;  <%}%> <% }); %>  
                data.CreateTime = DateTime.Now;
                data.CreateUser = request.CustomerId; 
                data.IsValid = HY.BusinessBase.BusinessConst.ISVALID_TRUR; 
                repository.Add(data);
            }
            else
            {
                
                data.ModifyTime = DateTime.Now;
                data.ModifyUser = request.CustomerId;
            }
        }

        private void ReSetIsvalid()
        {
            data.IsValid = request.IsValid;
            data.ModifyTime = DateTime.Now;
            data.ModifyUser = request.CustomerId;
        }
    }
}
